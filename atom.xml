<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OuyangSheng&#39;s Blog</title>
  
  <subtitle>Thinking,Tech....</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-07T03:02:20.403Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>OuyangSheng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux clock subsystem</title>
    <link href="http://yoursite.com/2018/06/07/Linux-clock-subsystem/"/>
    <id>http://yoursite.com/2018/06/07/Linux-clock-subsystem/</id>
    <published>2018-06-07T02:44:40.000Z</published>
    <updated>2018-06-07T03:02:20.403Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Linux Clock的框架图：</p><img src="/2018/06/07/Linux-clock-subsystem/ccf.png" title="CCF"><p>以上的框架图就能说明整个clock子系统的运作情况，从上往下看，clock consumer – clock core  – clock provider，同时通过DTS来配置串接。大多数Linux子系统中都呈现这种分层式架构。</p><p>clock consumer ：向其它driver提供操作clocks的通用API。<br>clock core：实现clock控制的通用逻辑，这部分和硬件无关。<br>clock provider：将和硬件相关的clock控制逻辑封装成操作函数集，交由底层的platform开发者实现，由通用逻辑调用。</p><h3 id="硬件相关"><a href="#硬件相关" class="headerlink" title="硬件相关"></a>硬件相关</h3><p>那么板子上clock相关模块到底是如何分布和规划的？</p><img src="/2018/06/07/Linux-clock-subsystem/clk-hw.png" title="Clock Hardware"><p>上图从左往右看，最开始的源头产生：Oscillator  –&gt; 中间可能有倍频PLL、分频Divider、多路选择Mux、开关Gate –&gt; clock使用的硬件模块。</p><p>也就是说，软件层面的架构 与 硬件层面的架构有一定程度的吻合。比如软件需要提供：1.Enable/Disable Clk；2. Set clk rate; 3. 选择clock的parent。 </p><h3 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h3><p>主要是如何体现clock consumer <---> clock core(CCF)  <---> clock provider。两个层面问题，一是clock provider是如何注册进CCF的，二是clock consumer如何从CCF通过相应API获取对应的Clock控制。</---></---></p><h5 id="1-Clock-provider注册进CCF"><a href="#1-Clock-provider注册进CCF" class="headerlink" title="1.Clock provider注册进CCF"></a>1.Clock provider注册进CCF</h5><p>以Allwinner H5 Linux3.10为例，初始化的起点从start_kernel() 进入板级DT_MACHINE_START，如下：<br>linux-3.10\arch\arm\mach-sunxi\Sun50i.c<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">DT_MACHINE_START</span><span class="params">(SUNXI_DT, CONFIG_SUNXI_SOC_NAME)</span></span></span><br><span class="line"> <span class="selector-class">.map_io</span>= sunxi_map_io,</span><br><span class="line"> <span class="selector-class">.init_time</span>= sunxi_timer_init,</span><br><span class="line"> <span class="selector-class">.dt_compat</span>= sunxi_board_dt_compat,</span><br><span class="line">MACHINE_END</span><br></pre></td></tr></table></figure></p><p>从sunxi_timer_init – &gt; of_clk_init –&gt; __clk_of_table中所有需要注册的各种类型clock – &gt; linux-3.10\drivers\clk\sunxi\clk-sun50iw2.c 中CLK_OF_DECLARE定义的初始化函数。</p><p>以上有两个问题阐释下，一是<code>__clk_of_table</code>从何而来，二是具体初始化哪些clock类型。<br><code>__clk_of_table</code>是从所有<code>CLK_OF_DECLARE</code>定义而来，而初始化哪些clock则是由<code>CLK_OF_DECLARE</code>中的定义与Clock Provider DTS中的定义匹配而来，举个Fixed Clock的例子：<br>clk-sun50iw2.c中定义<code>CLK_OF_DECLARE(sunxi_fixed_clk, &quot;allwinner,fixed-clock&quot;,of_sunxi_fixed_clk_setup);</code> ，而DTS(sun50iw1p1-clk.dtsi)中的定义：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* register fixed rate clock*/</span></span><br><span class="line"><span class="symbol">  clk_losc:</span> losc &#123;</span><br><span class="line">   <span class="comment">#clock-cells = &lt;0&gt;;</span></span><br><span class="line">   compatible = <span class="string">"allwinner,fixed-clock"</span><span class="comment">;</span></span><br><span class="line">   <span class="keyword">clock-frequency </span>= &lt;<span class="number">32768</span>&gt;<span class="comment">;</span></span><br><span class="line">   <span class="keyword">clock-output-names </span>= <span class="string">"losc"</span><span class="comment">;</span></span><br><span class="line">  &#125;<span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">  clk_hosc:</span> hosc &#123;</span><br><span class="line">   <span class="comment">#clock-cells = &lt;0&gt;;</span></span><br><span class="line">   compatible = <span class="string">"allwinner,fixed-clock"</span><span class="comment">;</span></span><br><span class="line">   <span class="keyword">clock-frequency </span>= &lt;<span class="number">24000000</span>&gt;<span class="comment">;</span></span><br><span class="line">   <span class="keyword">clock-output-names </span>= <span class="string">"hosc"</span><span class="comment">;</span></span><br><span class="line">  &#125;<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>从上面可以看到是通过<code>allwinner,fixed-clock</code>字段来匹配的，匹配之后最终通过clk_register/of_clk_add_provider添加到CCF中以供Clock Consumer使用。这只是其中一种clock类型，那么还有哪些类型呢？<br>根据clock的特点，clock framework将clock分为fixed rate、gate、devider、mux、fixed factor、composite六类，每一类clock都有相似的功能、相似的控制方式，因而可以使用相同的逻辑，统一处理，这充分体现了面向对象的思想。</p><ul><li>fixed rate clock：具有固定的频率，不能开关、不能调整频率、不能选择parent、不需要提供任何的clk_ops回调函数，是最简单的一类clock。</li><li>gate clock：只可开关，会提供.enable/.disable回调。</li><li>divider clock：可以设置分频值，因而会提供.recalc_rate/.set_rate/.round_rate回调。</li><li>mux clock：可以选择多个parent，因为会实现.get_parent/.set_parent/.recalc_rate回调。</li><li>fixed factor clock：具有固定的factor（即multiplier和divider），clock的频率是由parent clock的频率，乘以mul，除以div，多用于一些具有固定分频系数的clock。由于parent clock的频率可以改变，因而fix factor clock也可该改变频率，因此也会提供.recalc_rate/.set_rate/.round_rate等回调。</li><li>composite clock：顾名思义，就是mux、divider、gate等clock的组合。</li></ul><h5 id="2-Clock-Consumer如何使用Clock"><a href="#2-Clock-Consumer如何使用Clock" class="headerlink" title="2.Clock Consumer如何使用Clock"></a>2.Clock Consumer如何使用Clock</h5><p>以Emmc模块为例，首先需要在DTS中EMMC相关部分配置，指明需要消费哪些Clock Provider中提供clock类型：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">sdc2:</span> <span class="class">sdmmc@01C11000 </span>&#123;</span><br><span class="line"> compatible = <span class="string">"allwinner,sun50i-sdmmc2"</span>;</span><br><span class="line"> ~~~~~~</span><br><span class="line"> clocks = <span class="params">&lt;<span class="variable">&amp;clk_hosc</span>&gt;</span>,<span class="params">&lt;<span class="variable">&amp;clk_pll_periph1x2</span>&gt;</span>,<span class="params">&lt;<span class="variable">&amp;clk_sdmmc2_mod</span>&gt;</span>,<span class="params">&lt;<span class="variable">&amp;clk_sdmmc2_bus</span>&gt;</span>,<span class="params">&lt;<span class="variable">&amp;clk_sdmmc2_rst</span>&gt;</span>;</span><br><span class="line"> clock-names = <span class="string">"osc24m"</span>,<span class="string">"pll_periph"</span>,<span class="string">"mmc"</span>,<span class="string">"ahb"</span>,<span class="string">"rst"</span>;</span><br><span class="line"> ~~~~~~</span><br><span class="line">     &#125;;</span><br></pre></td></tr></table></figure></p><p>如以上的clk_sdmmc2_mod、clk_sdmmc2_bus、clk_sdmmc2_rst就有在<code>sun50iw1p1-clk.dtsi</code>中定义。然后在emmc驱动相关代码中通过CCF提供的API取得相关clk并配置，如下(<code>sunxi-mmc.c</code>)：<br><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">host</span>-&gt;</span><span class="function"><span class="title">clk_mmc</span> = devm_clk_get(&amp;pdev-&gt;</span>dev, <span class="string">"mmc"</span>);  -- 取得clk</span><br><span class="line"><span class="function"><span class="title">if</span> (IS_ERR(host-&gt;</span>clk_mmc)) &#123;</span><br><span class="line"> <span class="function"><span class="title">dev_err</span>(&amp;pdev-&gt;</span>dev, <span class="string">"Could not get mmc clock\n"</span>);</span><br><span class="line"> <span class="function"><span class="title">ret</span> = PTR_ERR(host-&gt;</span>clk_mmc);</span><br><span class="line"> goto error_disable_regulator;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">ret</span> = clk_prepare_enable(host-&gt;</span>clk_mmc); -- 使能clk</span><br><span class="line"><span class="keyword">if</span> (ret) &#123;</span><br><span class="line"> <span class="function"><span class="title">dev_err</span>(&amp;pdev-&gt;</span>dev, <span class="string">"Enable mmc clk err %d\n"</span>, ret);</span><br><span class="line"> goto error_disable_clk_ahb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>除了<code>devm_clk_get/clk_prepare_enable</code>外还有一些clock操作的API：</p><ul><li>clk_enable/clk_disable，启动/停止clock。不会睡眠。</li><li>clk_prepare/clk_unprepare，启动clock前的准备工作/停止clock后的善后工作。可能会睡眠。</li><li>clk_get_rate/clk_set_rate/clk_round_rate，clock频率的获取和设置，其中clk_set_rate可能会不成功（例如没有对应的分频比），此时会返回错误。如果要确保设置成功，则需要先调用clk_round_rate接口，得到和需要设置的rate比较接近的那个值。</li><li>获取/选择clock的parent clock。</li><li>clk_prepare_enable，将clk_prepare和clk_enable组合起来，一起调用。clk_disable_unprepare,将clk_disable和clk_unprepare组合起来，一起调用。</li></ul><p>更详细的解读可参考如下。</p><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><p><a href="http://www.wowotech.net/linux_kenrel/clk_overview.html" target="_blank" rel="noopener">Linux common clock framework(1)_概述</a><br><a href="http://www.wowotech.net/pm_subsystem/ccf-arch.html" target="_blank" rel="noopener">Common Clock Framework系统结构</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Linux Clock的框架图：&lt;/p&gt;
&lt;img src=&quot;/2018/06/07/Linux-clock-subsystem/ccf.p
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux process</title>
    <link href="http://yoursite.com/2018/05/17/Linux-process/"/>
    <id>http://yoursite.com/2018/05/17/Linux-process/</id>
    <published>2018-05-17T11:29:06.000Z</published>
    <updated>2018-05-24T12:22:32.337Z</updated>
    
    <content type="html"><![CDATA[<h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>Linux内核中进程用task_struct结构体表示，称为进程描述符，该结构体相对比较复杂，有几百行代码，记载着该进程相关的所有信息，比如进程地址空间，进程状态，打开的文件等。对内核而言，进程或者线程都称为任务task。内核将所有进程放入一个双向循环链表结构的任务列表(task list)。</p><img src="/2018/05/17/Linux-process/task_struct.jpg" title="task_struct"><p>Linux内核是抢占式多任务工作模式，进程大致分为两类（两者可相互转化）：</p><ul><li>守护进程（服务）: daemon,由内核在系统引导过程中启动的进程，和终端无关进程；</li><li>前台进程：跟终端相关，通过终端启动的进程（用户进程）；</li></ul><p>按进程占用资源的多少可以讲进程分为：</p><ul><li>CPU-Bound： CPU密集型（对CPU密集型是对cpu占用率高的进程），非交互；</li><li>IO-Bound： IO密集型（等待I/O时间长的进程），交互；</li></ul><h3 id="进程的状态"><a href="#进程的状态" class="headerlink" title="进程的状态"></a>进程的状态</h3><img src="/2018/05/17/Linux-process/ProcessState.png" title="Process State"><ul><li><p>TASK_RUNNING<br>运行态： running<br>就绪态： ready（可以运行但是没运行）</p></li><li><p>TASK_INTERRUPTIBLE &amp; TASK_UNINTERRUPTIBLE</p></li></ul><p>在linux系统中，一个进程无法获得某种资源，如锁（自旋锁、互斥锁、顺序锁、信号量等）、信号、中断，将进入等待状态，同时一个进程也可以根据需要主动进入等待状态。将进程从运行状态迁移到等待状态的方式：</p><ol><li>wait_event  </li><li>wait_event_timeout </li><li>wait_event_interruptible </li><li>wait_event_interruptible_timeout </li></ol><p>1和2函数将进程放人等待队列中，并将当前进程的状态设置为TASK_UNINTERRUPTIBLE，即在等待队列中的进程不可以被信号激活，而只能由中断事件激活；<br>3和4函数将进程放人等待队列中，并将当前进程的状态设置为TASK_INTERRUPTIBLE，即在等待队列中的进程可以被信号和中断事件激活；<br>2和4函数会为当前等待进程设置一个定时器，当等待进程在指定的时间内没有被信号或者中断激活时，这个定时器将激活等待进程。 </p><ul><li><p>TASK_STOPPED<br>进程被停止执行，当进程接收到SIGSTOP、SIGTTIN、SIGTSTP或者SIGTTOU信号之后就会进入该状态。</p></li><li><p>EXIT_ZOMBIE<br>进程的执行被终止，但是其父进程还没有使用wait()等系统调用来获知它的终止信息，此时进程成为僵尸进程。</p></li><li><p>EXIT_DEAD<br>进程的最终状态。</p></li></ul><h3 id="创建新进程"><a href="#创建新进程" class="headerlink" title="创建新进程"></a>创建新进程</h3><p>分为三类：</p><ul><li>Linux进程创建</li><li>Linux用户级线程创建</li><li>Linux内核线程创建</li></ul><h4 id="Linux进程创建"><a href="#Linux进程创建" class="headerlink" title="Linux进程创建"></a>Linux进程创建</h4><p>通过fork()及exec()系统调用创建进程。</p><ul><li><p>fork: 采用复制当前进程的方式来创建子进程，此时子进程与父进程的区别仅在于pid, ppid以及资源统计量(比如挂起的信号)。</p></li><li><p>exec：读取可执行文件并载入地址空间执行；一般称之为exec函数族，有一系列exec开头的函数，比如execl, execve等。</p></li></ul><p>fork过程复制资源包括代码段，数据段，堆，栈。fork调用者所在进程便是父进程，新创建的进程便是子进程；在fork调用结束，从内核返回两次，一次继续执行父进程，一次进入执行子进程。</p><img src="/2018/05/17/Linux-process/fork_diagram.png" title="FORK"><p>进程内存段：</p><img src="/2018/05/17/Linux-process/process_address_space.png" title="Process address space"><p>exec执行的例子(<code>ls</code>)</p><img src="/2018/05/17/Linux-process/exec_ls.png" title="exec ls"><h4 id="Linux用户级线程创建"><a href="#Linux用户级线程创建" class="headerlink" title="Linux用户级线程创建"></a>Linux用户级线程创建</h4><p>通过pthread库中的pthread_create()创建线程，也并非”轻量级进程”，在Linux看来线程是一种进程间共享资源的方式，线程可看做是跟其他进程共享资源的进程。</p><img src="/2018/05/17/Linux-process/do_fork.jpg"><p>fork, vfork,clone根据不同参数调用do_fork：</p><ul><li>pthread_create: flags参数为 CLONE_VM, CLONE_FS, CLONE_FILES, CLONE_SIGHAND</li><li>fork: flags参数为 SIGCHLD</li><li>vfork: flags参数为 CLONE_VFORK, CLONE_VM, SIGCHLD</li></ul><p>所以进程与线程最大的区别在于资源是否共享，线程间共享的资源主要包括内存地址空间，文件系统，已打开文件，信号等信息， 如下图蓝色部分的flags便是线程创建过程所必需的参数。</p><img src="/2018/05/17/Linux-process/clone_flags.jpg"><img src="/2018/05/17/Linux-process/process_and_thread.png"><h4 id="Linux内核线程创建"><a href="#Linux内核线程创建" class="headerlink" title="Linux内核线程创建"></a>Linux内核线程创建</h4><p>通过kthread_create()创建内核线程，最初线程是停止的，需要使用wake_up_process启动它。它没有独立的地址空间，即mm指向NULL。这样的线程只在内核运行，不会切换到用户空间。所有内核线程都是由kthreadd作为内核线程的祖师爷，衍生而来的。</p><p>Linux内核可以看作一个服务进程(管理软硬件资源，响应用户进程的种种合理以及不合理的请求)。内核需要多个执行流并行，为了防止可能的阻塞，支持多线程是必要的。内核线程就是内核的分身，一个分身可以处理一件特定事情。内核线程的调度由内核负责，一个内核线程处于阻塞状态时不影响其他的内核线程，因为其是调度的基本单位。内核线程是直接由内核本身启动的进程。内核线程实际上是将内核函数委托给独立的进程，它与内核中的其他进程”并行”执行。内核线程经常被称之为内核守护进程。</p><p>内核线程主要有两种类型：</p><ol><li><p>线程启动后一直等待，直至内核请求线程执行某一特定操作。</p></li><li><p>线程启动后按周期性间隔运行，检测特定资源的使用，在用量超出或低于预置的限制时采取行动。</p></li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>Linux使用task_struct来描述进程和线程：</p><p>一个进程由于其运行空间的不同, 从而有内核线程和用户进程的区分, 内核线程运行在内核空间, 之所以称之为线程是因为它没有虚拟地址空间, 只能访问内核的代码和数据, 而用户进程则运行在用户空间, 不能直接访问内核的数据但是可以通过中断, 系统调用等方式从用户态陷入内核态，但是内核态只是进程的一种状态, 与内核线程有本质区别。</p><p>用户进程运行在用户空间上, 而一些通过共享资源实现的一组进程我们称之为线程组, Linux下内核其实本质上没有线程的概念, Linux下线程其实上是与其他进程共享某些资源的进程而已。但是我们习惯上还是称他们为线程或者轻量级进程。</p><p>因此, Linux上进程分3种，内核线程（或者叫核心进程）、用户进程、用户线程, 当然如果更严谨的，你也可以认为用户进程和用户线程都是用户进程。</p><ul><li><p>内核线程拥有 进程描述符、PID、进程正文段、核心堆栈</p></li><li><p>用户进程拥有 进程描述符、PID、进程正文段、核心堆栈 、用户空间的数据段和堆栈</p></li><li><p>用户线程拥有 进程描述符、PID、进程正文段、核心堆栈，同父进程共享用户空间的数据段和堆栈</p></li></ul><h3 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a>进程调度</h3><p>现在的操作系统都是多任务的，为了能让更多的任务能同时在系统上更好的运行，需要一个管理程序来管理计算机上同时运行的各个任务（也就是进程）。</p><p>这个管理程序就是调度程序，它的功能说起来很简单：</p><ol><li><p>决定哪些进程运行，哪些进程等待;</p></li><li><p>决定每个进程运行多长时间;</p></li></ol><p>此外，为了获得更好的用户体验，运行中的进程还可以立即被其他更紧急的进程打断。总之，调度是一个平衡的过程。一方面，它要保证各个运行的进程能够最大限度的使用CPU(即尽量少的切换进程，进程切换过多，CPU的时间会浪费在切换上)；另一方面，保证各个进程能公平的使用CPU(即防止一个进程长时间独占CPU的情况)。</p><img src="/2018/05/17/Linux-process/context_switching.png"><p>把进程区分为三类:</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">描述</th><th style="text-align:center">示例 </th></tr></thead><tbody><tr><td style="text-align:center">交互式进程(interactive process)</td><td style="text-align:center">此类进程经常与用户进行交互, 因此需要花费很多时间等待键盘和鼠标操作. 当接受了用户的输入后, 进程必须很快被唤醒, 否则用户会感觉系统反应迟钝</td><td style="text-align:center">shell, 文本编辑程序和图形应用程序</td></tr><tr><td style="text-align:center">批处理进程(batch process)</td><td style="text-align:center">此类进程不必与用户交互, 因此经常在后台运行. 因为这样的进程不必很快相应, 因此常受到调度程序的怠慢</td><td style="text-align:center">程序语言的编译程序, 数据库搜索引擎以及科学计算</td></tr><tr><td style="text-align:center">实时进程(real-time process)</td><td style="text-align:center">这些进程由很强的调度需要, 这样的进程绝不会被低优先级的进程阻塞. 并且他们的响应时间要尽可能的短</td><td style="text-align:center">视频音频应用程序, 机器人控制程序以及从物理传感器上收集数据的程序</td></tr></tbody></table><p>实时进程：实时进程的优先级是静态设定的，而且始终大于普通进程的优先级。因此只有当runqueue中没有实时进程的情况下，普通进程才能够获得调度。实时进程采用两种调度策略，SCHED_FIFO 和 SCHED_RR，FIFO 采用先进先出的策略，对于所有相同优先级的进程，最先进入runqueue的进程总能优先获得调度；Round Robin采用更加公平的轮转策略，使得相同优先级的实时进程能够轮流获得调度。</p><p>调度算法的主要演化：O(n) -&gt; O(1) -&gt; CFS</p><p>观看以下两个video：<br><a href="https://www.youtube.com/watch?v=vF3KKMI3_1s" target="_blank" rel="noopener">Scheduling in Linux: O(n), O(1) Scheduler</a><br><a href="https://www.youtube.com/watch?v=scfDOof9pww" target="_blank" rel="noopener">Completely Fair Scheduling (CFS)</a></p><h3 id="进程相关命令"><a href="#进程相关命令" class="headerlink" title="进程相关命令"></a>进程相关命令</h3><p><code>pstree, ps, pidof,pgrep, top, htop, glance, pmap, vmstat, dstat, kill,pkill, job, bg, fg, nohup</code></p><h3 id="进程通信机制"><a href="#进程通信机制" class="headerlink" title="进程通信机制"></a>进程通信机制</h3><ul><li>同一主机上</li></ul><ol><li>signal（信号）</li><li>shm: shared memory（分享内存）</li><li>semophore：信号量，一种计数器</li></ol><ul><li>不同主机上</li></ul><ol><li>rpc: remote procedure call(远程过程调用)</li><li>socket（套接字）: IP和端口号</li></ol><h3 id="references"><a href="#references" class="headerlink" title="references"></a>references</h3><p><a href="http://www.wowotech.net/linux_kenrel/11.html" target="_blank" rel="noopener">Linux内核的整体架构</a></p><p><a href="https://blog.csdn.net/gatieme/article/details/51456569" target="_blank" rel="noopener">Linux进程管理与调度-之-目录导航</a></p><p><a href="http://gityuan.com/2017/08/05/linux-process-fork/" target="_blank" rel="noopener">Linux进程管理-gityuan</a></p><p><a href="https://wenku.baidu.com/view/5550581f3186bceb18e8bb5a.html?from=search" target="_blank" rel="noopener">Linux内核进程管理架构图</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
&lt;h3 id=&quot;进程&quot;&gt;&lt;a href=&quot;#进程&quot; class=&quot;headerlink&quot; title=&quot;进程&quot;&gt;&lt;/a&gt;进程&lt;/h3&gt;&lt;p&gt;Linux内核中进程用task_struct结构体表示，称为进程描述符，该结构体相对比较复杂，有几百行代码，记载着该进程相关的所有信息，比
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Android开机启动优化</title>
    <link href="http://yoursite.com/2018/05/14/Android%20boot%20optimization/"/>
    <id>http://yoursite.com/2018/05/14/Android boot optimization/</id>
    <published>2018-05-14T12:37:32.000Z</published>
    <updated>2018-05-19T04:14:40.336Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/05/14/Android%20boot%20optimization/fast.jpg" title="Fast android"><h2 id="开机流程"><a href="#开机流程" class="headerlink" title="开机流程"></a>开机流程</h2><p>如下图：</p><img src="/2018/05/14/Android%20boot%20optimization/boot.png" title="Android boot process"><h2 id="Linux优化"><a href="#Linux优化" class="headerlink" title="Linux优化"></a>Linux优化</h2><p>可以通过添加打印module init的log，来check每个module初始化时的时间。从而找到花费时间比较多的module:<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">--- a/init/main.c</span><br><span class="line">+++ b/init/main.c</span><br><span class="line"><span class="comment">@@</span> <span class="number">-785</span>,<span class="number">7</span> +<span class="number">785</span>,<span class="number">7</span> <span class="comment">@@</span> int __init_or_module</span><br><span class="line">do_one_initcall(initcall_t <span class="function"><span class="keyword">fn</span>)</span></span><br><span class="line"><span class="function">        <span class="keyword">if</span> <span class="params">(initcall_blacklisted(<span class="keyword">fn</span>)</span>)</span></span><br><span class="line"><span class="function">                <span class="keyword">return</span></span></span><br><span class="line"><span class="function">-EPERM</span>;</span><br><span class="line"></span><br><span class="line">-      <span class="keyword">if</span> (initcall_debug)</span><br><span class="line">+      <span class="keyword">if</span> (<span class="number">1</span>)</span><br><span class="line">                ret =</span><br><span class="line">do_one_initcall_debug(<span class="function"><span class="keyword">fn</span>)</span>;</span><br></pre></td></tr></table></figure></p><p>优化方案：</p><ol><li>通过一个比gzip更快的方式去解压内核镜像；</li><li>去掉系统中一些不必要的log打印；</li><li>去掉一些系统中不需要的驱动模块；</li><li>启动时即以最大频率（cpu/DDR）且多核一起跑；</li></ol><h2 id="Android优化"><a href="#Android优化" class="headerlink" title="Android优化"></a>Android优化</h2><p>查看时间：</p><p><code>adb logcat -v threadtime -b events &gt; logcat_envents.txt</code></p><p><code>adb logcat -v threadtime &gt; logcat.txt</code></p><p>具体到全志H5平台，查看LOG发现：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">01</span>-<span class="number">01</span> <span class="number">03</span>:<span class="number">00</span>:<span class="number">23.233</span>  <span class="number">1503</span>  <span class="number">1503</span> I auditd  : type=<span class="number">2000</span> audit(<span class="number">0.0</span>:<span class="number">1</span>): initialized</span><br><span class="line"></span><br><span class="line"><span class="number">01</span>-<span class="number">01</span> <span class="number">03</span>:<span class="number">00</span>:<span class="number">24.730</span>  <span class="number">1503</span>  <span class="number">1503</span> I auditd  : type=<span class="number">1403</span> audit(<span class="number">0.0</span>:<span class="number">2</span>): policy loaded auid=<span class="number">4294967295</span> ses=<span class="number">4294967295</span></span><br><span class="line"></span><br><span class="line"><span class="number">01</span>-<span class="number">01</span> <span class="number">03</span>:<span class="number">00</span>:<span class="number">31.590</span>  <span class="number">1520</span>  <span class="number">1520</span> I boot_progress_start: <span class="number">8846</span> <span class="regexp">//</span>systemclock.uptimemillis(),开机到当前时间，毫秒。</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>Zygote 进程preload 开始时间 <span class="number">32</span>bit zygote</span><br><span class="line"></span><br><span class="line"><span class="number">01</span>-<span class="number">01</span> <span class="number">03</span>:<span class="number">00</span>:<span class="number">34.168</span>  <span class="number">1520</span>  <span class="number">1520</span> I boot_progress_preload_start: <span class="number">11425</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>Zygote 进程preload 结束时间<span class="number">32</span>bit zygot</span><br><span class="line"></span><br><span class="line"><span class="number">01</span>-<span class="number">01</span> <span class="number">03</span>:<span class="number">00</span>:<span class="number">37.394</span>  <span class="number">1520</span>  <span class="number">1520</span> I boot_progress_preload_end: <span class="number">14650</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>System server 开始运行时间</span><br><span class="line"></span><br><span class="line"><span class="number">01</span>-<span class="number">01</span> <span class="number">03</span>:<span class="number">00</span>:<span class="number">37.780</span>  <span class="number">1964</span>  <span class="number">1964</span> I boot_progress_system_run: <span class="number">15037</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>Package Scan 开始</span><br><span class="line"></span><br><span class="line"><span class="number">01</span>-<span class="number">01</span> <span class="number">03</span>:<span class="number">00</span>:<span class="number">38.553</span>  <span class="number">1964</span>  <span class="number">1964</span> I boot_progress_pms_start: <span class="number">15810</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>System 目录开始scan</span><br><span class="line"></span><br><span class="line"><span class="number">01</span>-<span class="number">01</span> <span class="number">03</span>:<span class="number">00</span>:<span class="number">38.931</span>  <span class="number">1964</span>  <span class="number">1964</span> I boot_progress_pms_system_scan_start: <span class="number">16188</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>data 目录开始scan</span><br><span class="line"></span><br><span class="line"><span class="number">01</span>-<span class="number">01</span> <span class="number">03</span>:<span class="number">00</span>:<span class="number">42.210</span>  <span class="number">1964</span>  <span class="number">1964</span> I boot_progress_pms_data_scan_start: <span class="number">19467</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>package scan 结束时间</span><br><span class="line"></span><br><span class="line"><span class="number">01</span>-<span class="number">01</span> <span class="number">03</span>:<span class="number">00</span>:<span class="number">42.230</span>  <span class="number">1964</span>  <span class="number">1964</span> I boot_progress_pms_scan_end: <span class="number">19487</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>package manager ready</span><br><span class="line"></span><br><span class="line"><span class="number">01</span>-<span class="number">01</span> <span class="number">03</span>:<span class="number">00</span>:<span class="number">42.727</span>  <span class="number">1964</span>  <span class="number">1964</span> I boot_progress_pms_ready: <span class="number">19984</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>Activity manager ready，这个事件之后便会启动home Activity。</span><br><span class="line"></span><br><span class="line"><span class="number">01</span>-<span class="number">01</span> <span class="number">03</span>:<span class="number">00</span>:<span class="number">45.432</span>  <span class="number">1964</span>  <span class="number">1964</span> I boot_progress_ams_ready: <span class="number">22689</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>HomeActivity 启动完毕，系统将检查目前所有的window是否画完，如果所有的window（包括wallpaper， Keyguard 等）都已经画好，系统会设置属性service.bootanim.<span class="keyword">exit</span>值为<span class="number">1</span>.并且trigger下面的event。</span><br><span class="line"></span><br><span class="line"><span class="number">01</span>-<span class="number">01</span> <span class="number">03</span>:<span class="number">00</span>:<span class="number">49.393</span>  <span class="number">1964</span>  <span class="number">2003</span> I boot_progress_enable_screen: <span class="number">26650</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>SF设置service.bootanim.<span class="keyword">exit</span>属性值为<span class="number">1</span>，标志系统要结束开机动画了，可以用来跟踪开机动画结尾部分消耗的时间</span><br><span class="line"></span><br><span class="line"><span class="number">01</span>-<span class="number">01</span> <span class="number">03</span>:<span class="number">00</span>:<span class="number">49.545</span>  <span class="number">1525</span>  <span class="number">1527</span> I sf_stop_bootanim: <span class="number">26801</span></span><br><span class="line"><span class="number">01</span>-<span class="number">01</span> <span class="number">03</span>:<span class="number">00</span>:<span class="number">49.579</span>  <span class="number">1964</span>  <span class="number">2020</span> I wm_boot_animation_done: <span class="number">26836</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 打开Launcher APP</span><br><span class="line"><span class="number">01</span>-<span class="number">01</span> <span class="number">03</span>:<span class="number">00</span>:<span class="number">50.516</span>  <span class="number">1964</span>  <span class="number">2429</span> I am_create_activity: [<span class="number">0</span>,<span class="number">14996279</span>,<span class="number">5</span>,tv.lfstrm.smotreshka_launcher<span class="regexp">/tv.lfstrm.mediaapp_launcher.MainActivity,android.intent.action.MAIN,NULL,NULL,268435712]</span></span><br></pre></td></tr></table></figure><p>用bootchart 图形化显示Android启动过程，如图</p><img src="/2018/05/14/Android%20boot%20optimization/bootchart.png" title="Allwinner H5 android7.1 bootchart"><h4 id="定制本地服务"><a href="#定制本地服务" class="headerlink" title="定制本地服务"></a>定制本地服务</h4><p>Init程序的log信息位于kernel Log中，通过检索“init starting”，我们可以找到init进程启动了哪些本地服务，如：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[    <span class="number">5.632951</span>] init: <span class="symbol">Starting</span> service <span class="string">'logd-reinit'</span>...</span><br><span class="line">[    <span class="number">5.635827</span>] init: <span class="symbol">Starting</span> service <span class="string">'zygote'</span>...</span><br><span class="line">[    <span class="number">5.637221</span>] init: <span class="symbol">Starting</span> service <span class="string">'netd'</span>...</span><br><span class="line">[    <span class="number">5.643302</span>] init: <span class="symbol">Starting</span> service <span class="string">'healthd'</span>...</span><br><span class="line">[    <span class="number">5.644695</span>] init: <span class="symbol">Starting</span> service <span class="string">'lmkd'</span>...</span><br><span class="line">[    <span class="number">5.646006</span>] init: <span class="symbol">Starting</span> service <span class="string">'servicemanager'</span>...</span><br><span class="line">[    <span class="number">5.647547</span>] init: <span class="symbol">Starting</span> service <span class="string">'surfaceflinger'</span>...</span><br><span class="line">[    <span class="number">5.752483</span>] init: <span class="symbol">Starting</span> service <span class="string">'console'</span>...</span><br><span class="line">[    <span class="number">6.154863</span>] init: <span class="symbol">Starting</span> service <span class="string">'audioserver'</span>...</span><br><span class="line">[    <span class="number">6.156551</span>] init: <span class="symbol">Starting</span> service <span class="string">'cameraserver'</span>...</span><br><span class="line">[    <span class="number">6.158068</span>] init: <span class="symbol">Starting</span> service <span class="string">'displayd'</span>...</span><br><span class="line">[    <span class="number">6.160115</span>] init: <span class="symbol">Starting</span> service <span class="string">'drm'</span>...</span><br><span class="line">[    <span class="number">6.161186</span>] init: <span class="symbol">Starting</span> service <span class="string">'gpio'</span>...</span><br><span class="line">[    <span class="number">6.162746</span>] init: <span class="symbol">Starting</span> service <span class="string">'installd'</span>...</span><br><span class="line">[    <span class="number">6.164462</span>] init: <span class="symbol">Starting</span> service <span class="string">'keystore'</span>...</span><br><span class="line">[    <span class="number">6.165992</span>] init: <span class="symbol">Starting</span> service <span class="string">'mediacodec'</span>...</span><br><span class="line">[    <span class="number">6.167700</span>] init: <span class="symbol">Starting</span> service <span class="string">'mediadrm'</span>...</span><br><span class="line">[    <span class="number">6.169339</span>] init: <span class="symbol">Starting</span> service <span class="string">'mediaextractor'</span>...</span><br><span class="line">[    <span class="number">6.171560</span>] init: <span class="symbol">Starting</span> service <span class="string">'media'</span>...</span><br><span class="line">[    <span class="number">6.172651</span>] init: <span class="symbol">Starting</span> service <span class="string">'multi_ir'</span>...</span><br><span class="line">[    <span class="number">6.174182</span>] init: <span class="symbol">Starting</span> service <span class="string">'ril-daemon'</span>...</span><br><span class="line">[    <span class="number">6.175224</span>] init: <span class="symbol">Starting</span> service <span class="string">'systemmix'</span>...</span><br><span class="line">[    <span class="number">6.399317</span>] init: <span class="symbol">Starting</span> service <span class="string">'adbd'</span>...</span><br><span class="line">[    <span class="number">6.733571</span>] init: <span class="symbol">Starting</span> service <span class="string">'bootanim'</span>...</span><br></pre></td></tr></table></figure><p>Init进程解析init.rc及init.xxx.rc之类的文件，启动一些本地服务，如果我们的设备中没有电话模块、蓝牙模块，我们可以将这些没用的本地服务在init.rc里注释掉。笔者做了对比，去掉几个本地服务与没有去掉本地服务，二者在开机时间上几乎没有减少多少，这也可以理解，因为本地服务就是几个程序，少执行和多执行几个程序对于总体开机时间没有多大影响，不过，去掉没有使用的本地服务，对整个系统性能来说，会有微不足道的提升。</p><p>优化建议：</p><ol><li>去掉开机动画服务(service bootanim /system/bin/bootanimation)可以一定程度上提高系统的启动速度。</li><li>可以通过在execute_one_command函数中统计测量 ，比如大于100ms的命令打印出来，再分析定位原因，这里命令执行时间长基本算BUG。</li></ol><h4 id="preloaded-classes-amp-resources"><a href="#preloaded-classes-amp-resources" class="headerlink" title="preloaded classes &amp; resources"></a>preloaded classes &amp; resources</h4><p>全志H5所花费时间：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">01<span class="selector-tag">-01</span> 03<span class="selector-pseudo">:00</span><span class="selector-pseudo">:12.869</span>  1520  1520 <span class="selector-tag">I</span> <span class="selector-tag">Zygote</span>  : <span class="selector-tag">Preloading</span> <span class="selector-tag">classes</span>...</span><br><span class="line">01<span class="selector-tag">-01</span> 03<span class="selector-pseudo">:00</span><span class="selector-pseudo">:14.982</span>  1520  1520 <span class="selector-tag">I</span> <span class="selector-tag">Zygote</span>  : ..<span class="selector-class">.preloaded</span> 4162 <span class="selector-tag">classes</span> <span class="selector-tag">in</span> 2113<span class="selector-tag">ms</span>.</span><br><span class="line">01<span class="selector-tag">-01</span> 03<span class="selector-pseudo">:00</span><span class="selector-pseudo">:15.683</span>  1520  1520 <span class="selector-tag">I</span> <span class="selector-tag">Zygote</span>  : <span class="selector-tag">Preloading</span> <span class="selector-tag">resources</span>...</span><br><span class="line">01<span class="selector-tag">-01</span> 03<span class="selector-pseudo">:00</span><span class="selector-pseudo">:15.879</span>  1520  1520 <span class="selector-tag">I</span> <span class="selector-tag">Zygote</span>  : ..<span class="selector-class">.preloaded</span> 114 <span class="selector-tag">resources</span> <span class="selector-tag">in</span> 196<span class="selector-tag">ms</span>.</span><br><span class="line">01<span class="selector-tag">-01</span> 03<span class="selector-pseudo">:00</span><span class="selector-pseudo">:15.887</span>  1520  1520 <span class="selector-tag">I</span> <span class="selector-tag">Zygote</span>  : ..<span class="selector-class">.preloaded</span> 41 <span class="selector-tag">resources</span> <span class="selector-tag">in</span> 8<span class="selector-tag">ms</span>.</span><br></pre></td></tr></table></figure><p>Android系统为了提高应用程序的启动速度，会在Zygote进程初始化过程中加载一些常用的java class和资源文件到进程的内存中，从而共享常用的class和resourse资源。</p><p>preloaded-classes list（<code>frameworks\base\preloaded-classes</code>）中预加载的类位于dalvik zygote进程的heap中。在zygote衍生一个新的dalvik进程后，新进程只需加载heap中没有预加载的类（这些后加载进来的类成为该进程所private独有的），这样便加快了应用程序的启动速度。实际上这是一种以空间换时间的办法，因为几乎没有一个应用程序能够使用到所有的预加载类，必定有很多类对于该应用程序来说是冗余的。但是也正如Google所说，智能手机开机远没有启动应用程序频繁——用户开机一次，但直到下次再开机之前可能要运行多个应用程序。因此牺牲一点启动时间来换取应用程序加载时的较快速度是合算的。</p><p>preloaded-classes list已经是Google Android工程师使用众多测试工具分析，加以手动微调后形成的最优化预加载列表，涵盖了智能机上最长见的应用类型所需要的各种类。很难想象我们自己能够有什么手段能够获得比这样更优的一个预加载列表。所以，除非你的Android系统是被移植到非智能手机设备上使用（例如MID、EBOOK，可以不需要Telephony相关的类），不建议去“优化”preloaded-classes list。</p><p>优化建议：</p><ol><li>preloadClasses()与preloadResources()可以放到两个线程里面跑。</li><li>修改zygote的nice值，及thread priority。</li></ol><h4 id="定制Android系统服务"><a href="#定制Android系统服务" class="headerlink" title="定制Android系统服务"></a>定制Android系统服务</h4><p>由Android的启动过程可知，init进程启动了app_process作为zygote，在app_process里启动了Dalvik虚拟机，然后加载执行了第一个Java程序ZygoteInit作为Dalvik主线程，在ZygoteInit里fork了第一个Java程序SystemServer，在SystemServer里启动了大量的Android的核心服务，通常来说这些服务一般不要去动，如果我们的设备里没有使用过某些服务，并且将来也明确不使用，可以将其去掉。</p><p>SystemServer启动了哪些Android服务：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">PowerManagerService</span>：电源管理服务  </span><br><span class="line"><span class="symbol">ActivityManagerService</span>：最核心服务之一，Activity管理服务</span><br><span class="line"><span class="symbol">PackageManagerService</span>：程序包管理服务 </span><br><span class="line"><span class="symbol">WindowManagerService</span>：窗口管理服务  </span><br><span class="line"><span class="keyword">BluetoothService：蓝牙服务 </span> </span><br><span class="line"><span class="symbol">WifiP2pService</span>：Wifi点对点直联服务  </span><br><span class="line"><span class="symbol">WifiService</span>：WIFI服务  </span><br><span class="line"><span class="symbol">ConnectivityService</span>：网络连接状态服务  </span><br><span class="line"><span class="symbol">MountService</span>：磁盘加载服务，通常也mountd和vold服务结合 </span><br><span class="line"><span class="symbol">AudioService</span>：AudioFlinger上层的封装的音量控制管理服务  </span><br><span class="line"><span class="symbol">UsbService</span>：USB Host和device管理服务</span><br></pre></td></tr></table></figure><p>优化这些services其实就是剔除我们不需要的一些services，而且不仅仅是修改SystemServer.java的问题，任何使用到被优化剔除掉的服务的代码都必须加以修改，否则系统肯定是起不来的。这样工作量大，而且难度也不小，并且有一定风险。因此对这些services的优化要慎之又慎。</p><h4 id="PackageManagerService扫描、检查APK安装包信息"><a href="#PackageManagerService扫描、检查APK安装包信息" class="headerlink" title="PackageManagerService扫描、检查APK安装包信息"></a>PackageManagerService扫描、检查APK安装包信息</h4><p>PMS对/system/framework，/system/app，/data/app，/data/app-private目录中的APK扫描耗费了大量的时间，如果预置的三方应用很多，这样启动的时间就会越长。</p><p>优化建议：</p><ol><li><p>/system/app下的应用，如果是预置应用，在Android.mk建议加上LOCAL_DEX_PREOPT := true控制，在/system/vendor下的预置应用，如果此应用编译时间比较长的，也使用上LOCAL_DEX_PREOPT := true</p></li><li><p>尽量减少data区内置app的数量，这个会严重影响开机速度，特别是第一次的开机速度。放在system的app  尽量生成odex  这样会加快开机速度。</p></li></ol><h4 id="Readahead"><a href="#Readahead" class="headerlink" title="Readahead"></a>Readahead</h4><p>因为IO慢的原因（cpu与存储类设备如emmc通讯），有两段耗时的地方：1. Zygote的preload 资源和class；2. PackageManagerService的包扫描。可以采用Linux上使用较多的readahead机制，大概原理是：</p><ol><li><p>统计开机过程中，读取的块数据信息，记录下来保存；</p></li><li><p>再次开机，通过记录下来的块数据读取信息，直接起一个服务，预先开始读，zygote或packagemanagerservice要读文件的时候，文件数据已经在cache中了。</p></li></ol><p>这样主要IO时间，跑到readahead进程去了。</p><h2 id="reference："><a href="#reference：" class="headerlink" title="reference："></a>reference：</h2><p><a href="https://blog.csdn.net/mr_raptor/article/details/8006721" target="_blank" rel="noopener">深入浅出 - Android系统移植与平台开发（六）－ 为Android启动加速</a></p><p><a href="https://blog.csdn.net/lqxandroid2012/article/details/54317298" target="_blank" rel="noopener">Android开机速度优化简单回顾——readahead</a></p><p><a href="https://blog.csdn.net/xxm282828/article/details/49095839" target="_blank" rel="noopener">android 5.1.1开机优化(framework层)</a></p><p><a href="https://legacy.gitbook.com/book/lihz1990/transoflptg/details" target="_blank" rel="noopener">Linux性能调优指南</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2018/05/14/Android%20boot%20optimization/fast.jpg&quot; title=&quot;Fast android&quot;&gt;
&lt;h2 id=&quot;开机流程&quot;&gt;&lt;a href=&quot;#开机流程&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Embeded Linux kernel boot process</title>
    <link href="http://yoursite.com/2018/05/05/Embeded-Linux-kernel-boot-process/"/>
    <id>http://yoursite.com/2018/05/05/Embeded-Linux-kernel-boot-process/</id>
    <published>2018-05-05T02:50:37.000Z</published>
    <updated>2018-05-09T01:46:51.695Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/05/05/Embeded-Linux-kernel-boot-process/linux-kernel-map.jpg" title="Linux kernel map"><h2 id="第一阶段（从跳转kernel-image到跑到start-kernel之前）"><a href="#第一阶段（从跳转kernel-image到跑到start-kernel之前）" class="headerlink" title="第一阶段（从跳转kernel image到跑到start_kernel之前）"></a>第一阶段（从跳转kernel image到跑到start_kernel之前）</h2><p>kernel入口地址在ENTRY(stext)，代码在arch/arm/kernel/head.S。</p><p>如何体现的？</p><p>在arch/arm/kernel/vmlinux.lds.S中，同时参考编译后生成的System.map文件，System.map是内核的内核符号表，在这里可以找到函数地址，变量地址，包括一些链接过程中的地址定义等等。</p><p>其中要做的事情：</p><ul><li>设置为SVC模式，关闭所有中断。</li></ul><p>为什么要设置成SVC模式？</p><p>除了用户模式之外的其他6种处理器模式称为特权模式。特权模式下，程序可以访问所有的系统资源（除了特定模式下的影子寄存器），也可以任意地进行处理器模式的切换，特权模式中，除系统模式外，其他5种模式又称为异常模式。<br>而用户模式下访问的资源受限，故不能使用用户模式，系统模式的优先级低于异常模式，故不使用系统模式，快中断模式、中断模式、中止模式、未定义模式用于特殊场景下由CPU自动切入,故不使用,所以需要使用SVC模式。</p><p>为什么要关闭所有中断？</p><p>在启动过程中，中断环境并没有完全准备好，也就是中断向量表和中断处理函数并没有完成设置，一旦有中断产生，可能会导致预想不到的问题，或者是程序跑飞。因此，在准备好中断环境之前，需要关闭所有中断。</p><ul><li>获取CPU ID，提取相应的proc info</li></ul><p>这里存在的MMU标识，也就是我们需要在打开MMU之前需要先获取procinfo的原因，因为打开MMU之前需要配置临时内核页表，而配置临时内核页表需要这里的MMU标识来进行设置。</p><ul><li>验证tags或者dtb</li></ul><p>dtb里面存放了各种硬件信息，如果dtb有问题，会导致后续开机过程中读取的设备信息有问题而导致无法开机。<br>在生成dtb的时候会在头部上添加一个幻数magic，而验证dtb是否合法主要也就是看这个dtb的magic是否和预期的值一致。 </p><ul><li>创建临时内核页表的页表项</li></ul><p>为了打开MMU，内核需要创建一个临时内核页表，用于kenrel启动过程中的打开MMU的过渡阶段。 在打开MMU的过程中，CPU还是按照地址顺序一条接着一条去获取指令，也就是说此时PC指针还是指向这段代码区域的物理地址。<br>当MMU打开之后，如果没有恒等映射的话，PC指针此时还是指向这段代码区域的物理地址，但实际上CPU会把PC指针的地址当作虚拟地址进行操作，而造成找不到对应的物理地址。</p><ul><li><p>使能MMU</p></li><li><p>跳转到start_kernel，也就是跳转到第二阶段，看其中寄存器说明，存的什么值</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* The following fragment of code is executed with the MMU on in MMU mode,</span></span><br><span class="line"><span class="comment">* and uses absolute addresses; this is not position independent.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  r0  = cp#15 control register</span></span><br><span class="line"><span class="comment">*  r1  = machine ID</span></span><br><span class="line"><span class="comment">*  r2  = atags/dtb pointer</span></span><br><span class="line"><span class="comment">*  r9  = processor ID</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    __INIT</span><br><span class="line"><span class="symbol">__mmap_switched</span>:</span><br><span class="line">    <span class="keyword">adr </span>   <span class="built_in">r3</span>, __mmap_switched_data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">ldmia </span>   <span class="built_in">r3</span>!, &#123;<span class="built_in">r4</span>, <span class="built_in">r5</span>, <span class="built_in">r6</span>, <span class="built_in">r7</span>&#125;</span><br><span class="line">    <span class="keyword">cmp </span>   <span class="built_in">r4</span>, <span class="built_in">r5</span>                <span class="comment">@ Copy data segment if needed</span></span><br><span class="line"><span class="number">1</span>:    <span class="keyword">cmpne </span>   <span class="built_in">r5</span>, <span class="built_in">r6</span></span><br><span class="line">    <span class="keyword">ldrne </span>   <span class="built_in">fp</span>, [<span class="built_in">r4</span>], <span class="number">#4</span></span><br><span class="line">    <span class="keyword">strne </span>   <span class="built_in">fp</span>, [<span class="built_in">r5</span>], <span class="number">#4</span></span><br><span class="line">    <span class="keyword">bne </span>   <span class="number">1</span>b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">mov </span>   <span class="built_in">fp</span>, <span class="number">#0</span>                <span class="comment">@ Clear BSS (and zero fp)</span></span><br><span class="line"><span class="number">1</span>:    <span class="keyword">cmp </span>   <span class="built_in">r6</span>, <span class="built_in">r7</span></span><br><span class="line">    <span class="keyword">strcc </span>   <span class="built_in">fp</span>, [<span class="built_in">r6</span>],<span class="number">#4</span></span><br><span class="line">    <span class="keyword">bcc </span>   <span class="number">1</span>b</span><br><span class="line"></span><br><span class="line"><span class="symbol">ARM</span>(    <span class="keyword">ldmia </span>   <span class="built_in">r3</span>, &#123;<span class="built_in">r4</span>, <span class="built_in">r5</span>, <span class="built_in">r6</span>, <span class="built_in">r7</span>, <span class="built_in">sp</span>&#125;)</span><br><span class="line"><span class="symbol">THUMB</span>(    <span class="keyword">ldmia </span>   <span class="built_in">r3</span>, &#123;<span class="built_in">r4</span>, <span class="built_in">r5</span>, <span class="built_in">r6</span>, <span class="built_in">r7</span>&#125;    )</span><br><span class="line"><span class="symbol">THUMB</span>(    <span class="keyword">ldr </span>   <span class="built_in">sp</span>, [<span class="built_in">r3</span>, <span class="number">#16</span>]        )</span><br><span class="line">    <span class="keyword">str </span>   <span class="built_in">r9</span>, [<span class="built_in">r4</span>]            <span class="comment">@ Save processor ID</span></span><br><span class="line">    <span class="keyword">str </span>   <span class="built_in">r1</span>, [<span class="built_in">r5</span>]            <span class="comment">@ Save machine type</span></span><br><span class="line">    <span class="keyword">str </span>   <span class="built_in">r2</span>, [<span class="built_in">r6</span>]            <span class="comment">@ Save atags pointer</span></span><br><span class="line">    <span class="keyword">bic </span>   <span class="built_in">r4</span>, <span class="built_in">r0</span>, <span class="symbol">#CR_A</span>            <span class="comment">@ Clear 'A' bit</span></span><br><span class="line">    <span class="keyword">stmia </span>   <span class="built_in">r7</span>, &#123;<span class="built_in">r0</span>, <span class="built_in">r4</span>&#125;            <span class="comment">@ Save control register values</span></span><br><span class="line">    <span class="keyword">b </span>   start_kernel</span><br><span class="line"><span class="symbol">ENDPROC</span>(__mmap_switched)</span><br></pre></td></tr></table></figure></li></ul><h2 id="第二阶段-start-kernel"><a href="#第二阶段-start-kernel" class="headerlink" title="第二阶段 - start_kernel"></a>第二阶段 - start_kernel</h2><p>以下只剖析个大概，不对细节做太深入的探讨。</p><p>代码路径：init/main.c  从start_kernel()开始，挑重点的介绍：</p><table><thead><tr><th style="text-align:center">重要函数</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">setup_arch</td><td style="text-align:center">architecture-specific setup ,如arch\arm\mach-sunxi\Sun8i.c 中MACHINE_START(SUNXI, “sun8i”) 下相关</td></tr><tr><td style="text-align:center">mm_init</td><td style="text-align:center">memory management</td></tr><tr><td style="text-align:center">sched_init</td><td style="text-align:center">调度相关</td></tr><tr><td style="text-align:center">vfs_caches_init</td><td style="text-align:center">file system, including kernfs, sysfs, rootfs, mount tree</td></tr><tr><td style="text-align:center">rest_init</td><td style="text-align:center">道生一（start_kernel–&gt;cpu_idle），一生二（kernel_init和kthreadd），二生三（即前面0、1和2三个进程），三生万物（1号进程是所有用户态进程的祖先，2号进程是所有内核线程的祖先。可以通过ps命令，查看PID及PPID的关系。</td></tr></tbody></table><p>其中大部分的工作是在rest_init中完成，对于Android系统来讲init进程在 system/core/init/init.c实现，下图代表Android系统的boot process：</p><img src="/2018/05/05/Embeded-Linux-kernel-boot-process/Android-process.png" title="android boot process"><p>设备驱动的init及probe也是在其中实现的，如下面的调用栈：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">`--&gt; rest_init</span><br><span class="line">    |</span><br><span class="line"><span class="string">    `--&gt; kernel_init</span></span><br><span class="line"><span class="string">          </span>|</span><br><span class="line">          |<span class="string">--&gt; kernel_init_freeable</span></span><br><span class="line"><span class="string">          </span>|<span class="string">    </span>|</span><br><span class="line">          |<span class="string">    </span>|<span class="string">--&gt; do_basic_setup</span></span><br><span class="line"><span class="string">          </span>|<span class="string">    </span>|<span class="string">    </span>|</span><br><span class="line">          |<span class="string">    </span>|<span class="string">    `--&gt; do_initcalls</span></span><br><span class="line"><span class="string">          </span>|<span class="string">    </span>|<span class="string">        :</span></span><br><span class="line"><span class="string">          </span>|<span class="string">    </span>|<span class="string">        :--&gt; early init calls</span></span><br><span class="line"><span class="string">          </span>|<span class="string">    </span>|<span class="string">        :--&gt; core init calls</span></span><br><span class="line"><span class="string">          </span>|<span class="string">    </span>|<span class="string">        :--&gt; post core init calls</span></span><br><span class="line"><span class="string">          </span>|<span class="string">    </span>|<span class="string">        :--&gt; arch init calls</span></span><br><span class="line"><span class="string">          </span>|<span class="string">    </span>|<span class="string">        :    :</span></span><br><span class="line"><span class="string">          </span>|<span class="string">    </span>|<span class="string">        :    `--&gt; customize_machine</span></span><br><span class="line"><span class="string">          </span>|<span class="string">    </span>|<span class="string">        :        </span>|</span><br><span class="line">          |<span class="string">    </span>|<span class="string">        :        `--&gt; machine_desc-&gt;init_machine</span></span><br><span class="line"><span class="string">          </span>|<span class="string">    </span>|<span class="string">        :</span></span><br><span class="line"><span class="string">          </span>|<span class="string">    </span>|<span class="string">        :--&gt; subsys init calls</span></span><br><span class="line"><span class="string">          </span>|<span class="string">    </span>|<span class="string">        :--&gt; fs init calls</span></span><br><span class="line"><span class="string">          </span>|<span class="string">    </span>|<span class="string">        :--&gt; device init calls</span></span><br><span class="line"><span class="string">          </span>|<span class="string">    </span>|<span class="string">        :    :</span></span><br><span class="line"><span class="string">          </span>|<span class="string">    </span>|<span class="string">        :    `--&gt; module_init() entries</span></span><br><span class="line"><span class="string">          </span>|<span class="string">    </span>|<span class="string">        :        drivers are probed during driver registration</span></span><br><span class="line"><span class="string">          </span>|<span class="string">    </span>|<span class="string">        :</span></span><br><span class="line"><span class="string">          </span>|<span class="string">    </span>|<span class="string">        `--&gt; late init calls</span></span><br></pre></td></tr></table></figure><p>从以上也可以看出kernel的启动顺序。</p><hr><p>References:</p><p><a href="https://blog.csdn.net/ooonebook/article/details/52710290" target="_blank" rel="noopener">kernel 启动流程</a></p><p><a href="https://danielmaker.github.io/blog/linux/inside_start_kernel.html" target="_blank" rel="noopener">深入淺出 start_kernel()</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2018/05/05/Embeded-Linux-kernel-boot-process/linux-kernel-map.jpg&quot; title=&quot;Linux kernel map&quot;&gt;
&lt;h2 id=&quot;第一阶段（从跳转kernel-image到跑到start
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>谈谈 U-boot 启动流程</title>
    <link href="http://yoursite.com/2018/04/25/Deep-into-Rk3399-uboot/"/>
    <id>http://yoursite.com/2018/04/25/Deep-into-Rk3399-uboot/</id>
    <published>2018-04-25T03:07:19.000Z</published>
    <updated>2018-04-26T10:06:46.227Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/04/25/Deep-into-Rk3399-uboot/uboot-fun.jpg" title="Lets kick-off"><h2 id="前面的话"><a href="#前面的话" class="headerlink" title="前面的话"></a>前面的话</h2><p>很自然的疑问，uboot是干什么的？它内部的运行机制是什么？把这两个问题解释清楚也不容易，所谓‘费曼法则’：通过向别人清楚的解说一件事情，来确认自己真的弄懂了这件事。</p><p>写技术文章，想深入浅出，非大师（在这个领域有多年的积累和实践）不可为，很显然我没有，本文只是初浅的梳理，大多是资料的索引。目的是熟悉整个框架，出问题时方便debug。</p><p>以RK3399为例。</p><p>一切得从官方的<a href="http://git.denx.de/?p=u-boot.git;a=blob_plain;f=README;hb=HEAD" target="_blank" rel="noopener">README</a>开始，其中有对uboot完整的描述，从文件目录介绍、代码流程、编译等等各方面都有涉及，建议通读一遍。</p><p>然后是Rockchip官方 <a href="http://opensource.rock-chips.com/wiki_Main_Page" target="_blank" rel="noopener">opensource</a> ，其中有开源代码链接，及<a href="http://opensource.rock-chips.com/wiki_Boot_option" target="_blank" rel="noopener">boot flow</a>介绍。</p><p>也许看完以上资料，可能还是懵懵懂懂，或许网上还有关于其他平台更为详细的资料介绍呢？search一番，发现samsung S5PV210文档最多，官方资料最详尽，是ARMV7架构，未加入Arm trust Firmware。</p><p>简而言之，uboot是在操作系统内核运行之前运行，可以初始化硬件设备、建立内存空间映射图，从而将系统的软硬件环境带到一个合适状态，以便为最终调用操作系统内核准备好正确的环境。</p><p>下面，从一些基础讲起，然后到网上分析比较多的Samsung S5PV210 Uboot，最后到RK3399的Uboot相关。</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul><li>Text、Data、BSS、Heap、Stack的区别</li></ul><p>先来看一幅图：</p><img src="/2018/04/25/Deep-into-Rk3399-uboot/memmap.png" title="Text Data BSS Heap Stack"><p>简单来说，Text是存放代码的，Data是存放已经初始化的全局变量，BSS是未初始化或是0的全局变量，Heap是由malloc等分配的堆，Stack是函数的局部变量或是函数返回值。</p><p>对于Uboot来讲，要特别关注链接脚本<code>arch\arm\cpu\u-boot.lds</code>，其中各段的分配情况，及代码重定位。</p><ul><li>NorFlash、eMMC、Nand flash、SRAM、SDRAM的区别</li></ul><table><thead><tr><th style="text-align:center">存储器</th><th style="text-align:center">上电后访问状态</th><th style="text-align:center">掉电后存储器中数据状态</th></tr></thead><tbody><tr><td style="text-align:center">Nor</td><td style="text-align:center">可以读取数据，无法直接写入</td><td style="text-align:center">数据存在</td></tr><tr><td style="text-align:center">Nand /eMMC</td><td style="text-align:center">初始化后才能读取写入</td><td style="text-align:center">数据存在</td></tr><tr><td style="text-align:center">SRAM</td><td style="text-align:center">可以读取写入数据</td><td style="text-align:center">数据不存在</td></tr><tr><td style="text-align:center">SDRAM</td><td style="text-align:center">上电后没有初始化DDR控制器无法进行数据读写</td><td style="text-align:center">数据不存在</td></tr></tbody></table><p>那么以上存储器在uboot启动过程中都扮演什么角色呢？</p><p>Norflash作为arm处理器程序存储器。可以试想一下，如果程序存储器掉电以后里面的数据没有了。那么你的电脑如何自启动，难道每次开机前都要重新烧写一次代码。在此处可以思考一个问题，在上电后norflash可以看作一个可以随机读取的只读存储器。但是我们运行的程序，一般情况下.text段（代码段）是只读（ok），.rodata（只读数据段）是只读（也ok）。那么问题来了，对于.data段（数据段）和.bss段(未初始化的全局变量和静态变量)在程序运行的过程中变量的值是需要改变的（改变一个变量的值在底层硬件完成操作&lt;在相应的地址（变量在物理地址上存储地址）上写入数据&gt;），很可惜Norflash只能直接读取无法直接进行写操作。（重要！  怎么解决这个问题？  这时就需要SRAM  因为SRAM上电后就可以直接去读写，下面我就解释下SRAM的功能和作用。</p><p>SRAM特性：掉电易失（失去电源供电后SRAM里存储的数据不存在了），可以随意&lt;读写&gt;数据。（容量小，程序运行速度快，价格高，一般在SoC里面。).在实际运行时，SRAM可以作为c语言运行时的堆栈空间。把arm处理器的sp（堆栈指针寄存器）设置在sram中，为c语言运行提供环境。关于全局变量的问题，我单独提一下，uboot在重定位前（将uboot镜像从flash搬运到ddr中继续运行前），无论是汇编还是c程序中没有定义全局变量。只是定义了一个结构体指针gd_t *gd_ptr用于存储uboot镜像的长度，重定位地址等信息，将gd_ptr的地址存储在r9中，r9中存储的地址值为sram顶端减去一个sizeof（gd_t ）。（存储在sram里就可以随意读写了嘛    后面分析uboot代码时我会详细讲解）。</p><p>SDRAM特性：掉电易失（失去电源供电后SDRAM里存储的数据不存在了），上电后没有初始化DDR控制器，无法进行数据读写。既然需要使用大容量的SDRAM，必须配置ddr时钟和ddr控制器的寄存器。这一步在哪完成呢？（思考一下） 没错就是在norflash和SRAM搭建的程序运行环境中完成。完成什么呢？  1.完成对处理器时钟的初始化 2. DDR的初始化  3.给gd_t *gd_ptr赋值 （用于存储uboot镜像的长度，重定位地址，重定位偏移量等信息）。在uboot搬运到DDR中运行前进行最小系统的初始化，之后就将uboot搬运到ddr中进行运行。（重要！此时Norfalsh和SRAM的任务就完成了（这俩就没用了），现在uboot就在ddr中运行了）。</p><p>Nand/SPI/eMMC：它们的I/O接口并没有随机存取外部地址总线，无法向SRAM随机访问地址上的数据，它必须以区块性的方式进行读取，而norflash带有SRAM接口，有足够的地址引脚来寻址，可以很容易地&lt;读取&gt;其内部的每一个字节。所以通常的方式是一上电的过程中自动缓存Nand中的Uboot数据到SRAM中，然后在SRAM中执行，在其中完成DDR、NAND的初始化，这时可以将代码搬到SDRAM中运行。</p><ul><li>编译地址、运行地址</li></ul><p>编译地址： 32位的处理器，它的每一条指令是4个字节，以4个字节存储顺序，进行顺序执行，CPU是顺序执行的，只要没发生什么跳转，它会顺序进行执行行， 编译器会对每一条指令分配一个编译地址，这是编译器分配的，在编译过程中分配的地址，我们称之为编译地址。</p><p>运行地址：是指程序指令真正运行的地址，是由用户指定的，用户将运行地址烧录到哪里，哪里就是运行的地址。</p><p>在relocation过程中，不是简单的将编译地址完整按顺序的搬到SDRAM中的运行地址空间的，而是会有一定的计算重新排布，参考<a href="https://blog.csdn.net/skyflying2012/article/details/37660265" target="_blank" rel="noopener">uboot的relocation原理详细分析</a>。</p><p>好，接下来我们来看看不带Trust 但支持SPL功能传统Uboot的启动模式，以S5PV210为例。</p><h2 id="S5PV210-U-Boot-Boot-Flow"><a href="#S5PV210-U-Boot-Boot-Flow" class="headerlink" title="S5PV210 U-Boot Boot Flow"></a>S5PV210 U-Boot Boot Flow</h2><p>一图胜千言。参考三星官方<a href="https://github.com/limingth/ARM-Resources/blob/master/tiny210/Datasheet/S5PV210_iROM_ApplicationNote_Preliminary_20091126.pdf" target="_blank" rel="noopener">Internal ROM Booting</a></p><img src="/2018/04/25/Deep-into-Rk3399-uboot/v210.png" title="v210 boot flow"><img src="/2018/04/25/Deep-into-Rk3399-uboot/uboot2.jpg" title="BL01 boot flow"><img src="/2018/04/25/Deep-into-Rk3399-uboot/uboot3.jpg" title="BL02 boot flow"><img src="/2018/04/25/Deep-into-Rk3399-uboot/uboot1.jpg" title="v210启动总结"><p>是不是有一种感觉，SPL有点多余？</p><p>这个主要原因是对于一些SOC来说，它的内部SRAM可能会比较小，小到无法装载下一个完整的uboot镜像，那么就需要spl，它主要负责初始化外部RAM和环境，并加载真正的uboot镜像到外部RAM中来执行。所以由此来看，SPL应该是一个非常小的loader程序，可以运行于SOC的内部SRAM中，它的主要功能就是加载真正的uboot并运行之。</p><h2 id="Rk3399-U-boot-Boot-Flow"><a href="#Rk3399-U-boot-Boot-Flow" class="headerlink" title="Rk3399 U-boot Boot Flow"></a>Rk3399 U-boot Boot Flow</h2><p>还是一图胜千言。</p><img src="/2018/04/25/Deep-into-Rk3399-uboot/3399-uboot.png" title="Rk3399 boot flow"> <p>从上图可以看出：</p><p>Boot Flow 1 is typical Rockchip boot flow with Rockchip miniloader（即是RK特殊定制的方式）；</p><p>Boot Flow 2 is used for most SoCs with U-Boot TPL for ddr init and SPL for trust(ATF/OP-TEE) load and run into next stage（常规的做法）；</p><p>Boot Flow 3 is use only for RK3399 with SPL ATF support（常规的做法）；</p><p>Boot Flow 4 is used for armv7 SoCs which do not support trust（不带trust，和上面三星v210类似）；</p><p>再加上ATF后的理解：</p><img src="/2018/04/25/Deep-into-Rk3399-uboot/3399-boot.png" title="Rk3399 boot flow"> <h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>其实还有很多主题可以完善，如 到底是如何relocation的，如何boot Linux image，uboot是如何编译的，driver的架构如何，ATF里面的psci如何操作休眠唤醒的。</p><p>待…………</p><p>参考：<br><a href="https://blog.csdn.net/kernel_yx/article/details/53045424" target="_blank" rel="noopener">深入理解uboot 2016 - 基础篇（处理器启动流程分析</a><br><a href="https://blog.csdn.net/ooonebook/article/details/52916202" target="_blank" rel="noopener">tiny210(s5pv210)上电启动流程（BL0-BL2）</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2018/04/25/Deep-into-Rk3399-uboot/uboot-fun.jpg&quot; title=&quot;Lets kick-off&quot;&gt;
&lt;h2 id=&quot;前面的话&quot;&gt;&lt;a href=&quot;#前面的话&quot; class=&quot;headerlink&quot; title=&quot;前
      
    
    </summary>
    
      <category term="uboot" scheme="http://yoursite.com/categories/uboot/"/>
    
    
      <category term="uboot" scheme="http://yoursite.com/tags/uboot/"/>
    
  </entry>
  
  <entry>
    <title>从头开始移植Ubuntu系统到ARM平台（基于全志H3）</title>
    <link href="http://yoursite.com/2018/04/20/Build-Ubuntu-for-ARM-Platform-From-Scratch/"/>
    <id>http://yoursite.com/2018/04/20/Build-Ubuntu-for-ARM-Platform-From-Scratch/</id>
    <published>2018-04-20T08:35:17.000Z</published>
    <updated>2018-04-24T09:05:09.425Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/04/20/Build-Ubuntu-for-ARM-Platform-From-Scratch/linux.jpg"><h3 id="起点"><a href="#起点" class="headerlink" title="起点"></a>起点</h3><p>在ARM SOC上移植Ubuntu系统并不是一件容易的事情，要对镜像文件的组成，系统的启动顺序非常熟悉。在网上searching一番，发现一个很神奇的网站-&gt;<a href="https://docs.armbian.com/Developer-Guide_Build-Preparation/" target="_blank" rel="noopener">Armbian</a>,这个网站开发者在大量的开发板上做了移植工作，包括allwinner H3/H5、Rockchip RK3328、amlogic S905x等，并且有详细的文档，以及开源的编译系统。</p><p>其实，参考Armbian的文档，即可搭建好完整编译环境，并针对你的板子（前提是里面已经支持的SoC）修改uboot、kernel、编译脚本即可定制，都是开源的。我尝试在H3平台上搭建，并成功制作了镜像，进到了系统。</p><h3 id="编译系统"><a href="#编译系统" class="headerlink" title="编译系统"></a>编译系统</h3><p>如果需要定制一些功能，如添加、删除一些脚本，应用程序，就必须完整看懂整个编译逻辑。Armbian上介绍是：</p><img src="/2018/04/20/Build-Ubuntu-for-ARM-Platform-From-Scratch/process.png"><p>从<a href="http://docs.khadas.com/social/MapoutBuildUbuntuFromScratch/" target="_blank" rel="noopener">khadas开发板网站</a> 上有更形象的图（但未必准确，尤其是对Initramfs与inittrd的理解）：</p><img src="/2018/04/20/Build-Ubuntu-for-ARM-Platform-From-Scratch/map.png"><p>对照编译脚本来看：</p><p>从根目录<code>compile.sh</code>开始，进入<code>main.sh</code>，主要工作在后者里完成，关键步骤：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1# Check <span class="keyword">and</span> install dependencies, directory structure <span class="keyword">and</span> settings</span><br><span class="line">prepare_host</span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.</span><br><span class="line">2# 下载uboot及kernel</span><br><span class="line">fetch_from_repo <span class="string">"<span class="variable">$BOOTSOURCE</span>"</span> <span class="string">"<span class="variable">$BOOTDIR</span>"</span> <span class="string">"<span class="variable">$BOOTBRANCH</span>"</span> <span class="string">"yes"</span></span><br><span class="line">fetch_from_repo <span class="string">"<span class="variable">$KERNELSOURCE</span>"</span> <span class="string">"<span class="variable">$KERNELDIR</span>"</span> <span class="string">"<span class="variable">$KERNELBRANCH</span>"</span> <span class="string">"yes"</span></span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.</span><br><span class="line">3# Compile u-boot <span class="keyword">if</span> packed .deb does <span class="keyword">not</span> exist</span><br><span class="line">compile_uboot</span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.</span><br><span class="line">4# Compile kernel <span class="keyword">if</span> packed .deb does <span class="keyword">not</span> exist</span><br><span class="line">compile_kernel</span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.</span><br><span class="line">5# create board support package /create desktop package / build additional packages</span><br><span class="line">create_board_package</span><br><span class="line">create_desktop_package</span><br><span class="line">chroot_build_packages</span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.</span><br><span class="line">6# Starting rootfs <span class="keyword">and</span> image building process</span><br><span class="line">debootstrap_ng</span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.</span><br><span class="line">7# make the image</span><br><span class="line">prepare_partitions</span><br><span class="line">create_image</span><br></pre></td></tr></table></figure><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><ol><li>里面有非常多的细节，要花些时间看明白，尤其要对shell scripts比较熟悉。</li><li>ramfs、Initramfs、ramdisk、inittrd、rootfs、tmpfs的区别，参考<a href="https://www.kernel.org/doc/Documentation/filesystems/ramfs-rootfs-initramfs.txt" target="_blank" rel="noopener">ramfs-rootfs-initramfs</a>。看了半天貌似也没看懂。简单来说，ramdisk是一种基于ram的块设备，ramfs是一种基于ram的文件系统，开发ramfs的目的是因为ramdisk浪费了太多的内存cache页。initrd是init ramdisk的缩写，initramfs是init ramfs的缩写。名称里加了init前缀，代表它们具有了引导内核启动的功能。</li><li>自己做的过程中，添加了一个自动挂载硬盘的功能，通过udev，但发现FAT32可以挂载，NTFS不能，网上searching一番并多次尝试，最终找到可行解决方案。参考如下<a href="https://serverfault.com/a/767079" target="_blank" rel="noopener">自动挂载</a>。也有第三方的解决方案，如autofs, HAL, udisks, udisks2, usbmount，并未尝试。另，一些有用的调试命令：</li></ol><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">udevadm info /dev/sda1 --此命令可以查看相关设备的udev属性，依据此来写rules。</span><br><span class="line">udevadm<span class="built_in"> monitor </span>--udev  --观察 uevent事件</span><br><span class="line">blkid   fdisk   lsblk</span><br></pre></td></tr></table></figure><p>以上只是一些索引记录，供参考。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2018/04/20/Build-Ubuntu-for-ARM-Platform-From-Scratch/linux.jpg&quot;&gt;
&lt;h3 id=&quot;起点&quot;&gt;&lt;a href=&quot;#起点&quot; class=&quot;headerlink&quot; title=&quot;起点&quot;&gt;&lt;/a&gt;起点&lt;
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>一文了解Linux command and Shell</title>
    <link href="http://yoursite.com/2018/04/20/Linux-command-and-shell/"/>
    <id>http://yoursite.com/2018/04/20/Linux-command-and-shell/</id>
    <published>2018-04-20T07:35:39.000Z</published>
    <updated>2018-04-20T07:43:37.652Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/04/20/Linux-command-and-shell/bash.png"><h2 id="系统命令何其多"><a href="#系统命令何其多" class="headerlink" title="系统命令何其多"></a>系统命令何其多</h2><p>Linux下命令那么多，好几千个，怎么办？用man查询，如 man ls（查看ls的用法）。</p><hr><p>看一看有哪些常用命令-&gt;</p><h4 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h4><ul><li>UID，GID</li></ul><p>常用命令：<code>id, who, /etc/passwd, groups</code></p><p>账号管理： <code>useradd, passwd, usermod, userdel, groupadd, groupdel, w</code></p><h4 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h4><p>常用命令： <code>pwd, touch, chmod, chown, which, whereis</code></p><ul><li>find</li></ul><p>查找指定文件并删除：<br><code>find android/ -maxdepth 3 -type f -a -name 2.log -delete</code></p><p>删除所有文件仅保留特定文件：<br><code>find android/ -type f -not -a -name &#39;*.java&#39; -delete</code></p><p>查找指定文件并搜索：<br><code>find android/ -type f -a -name &#39;*.java&#39; | grep -rn &quot;activity&quot;</code></p><ul><li>打包： <code>zip, tar</code></li></ul><p>例子：Android压缩SDK：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf xxx.tar.gz sdk_directory_name --exclude=.repo --exclude=.git --exclude=sdk_directory_name/uboot/build --exclude=sdk_directory_name/out --exclude=sdk_directory_name/ S82_SDK_20141121.tar.gz</span><br></pre></td></tr></table></figure></p><p>分卷压缩,网盘上传文件大小有限制这个命令会用到：</p><p><code>tar -zcvf - .repo/ |split -b 4000M - xxx_sdk.tar.gz</code></p><h4 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h4><p><code>df, fdisk, mount, lsblk, blkid, /etc/fstab(设置自动挂载)，ln -s(软链接)</code></p><h4 id="字符处理"><a href="#字符处理" class="headerlink" title="字符处理"></a>字符处理</h4><p>grep：<code>-r : 迭代到子文件夹；  -n：行号；  -i：不区分大小写</code></p><p>sort：<code>-n 数字排序   -r 反向排序  -t 指定分隔符</code></p><p>uniq：删除重复内容</p><p>cut：截取文本</p><h4 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h4><p>指定IP地址：<code>ipconfig eth0 192.168.1.6 netmask 255.255.255.0</code></p><p>手动打开断开网卡：<code>ifconfig eth0 up/ifconfig etho down</code></p><p>查看系统路由表：<code>route -n</code></p><p>DNS: <code>/etc/hosts， /etc/resolv.conf</code></p><h4 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h4><p><code>ps, top, kill, nice</code></p><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p><a href="https://blog.csdn.net/u012359618/article/details/51498959" target="_blank" rel="noopener">8种字符串截取方法</a></p><ul><li>sed与awk的区别：</li></ul><p>如果文件是格式化的，即由分隔符分为多个域的，优先使用awk；</p><p>awk适合按列（域）操作，sed适合按行操作；</p><p>awk适合对文件的抽取整理，sed适合对文件的编辑。</p><hr><h2 id="shell编程"><a href="#shell编程" class="headerlink" title="shell编程"></a>shell编程</h2><h4 id="shell-内建命令"><a href="#shell-内建命令" class="headerlink" title="shell 内建命令"></a>shell 内建命令</h4><p>由bash自身提供的命令，而不是/bin下某个可执行文件，比如：<code>cd，source</code>。如何确定，通过type。</p><p>alias，别名，可以在.bashrc中定制。</p><p>任务前后台切换：bg、fg、jobs。可与Ctrl+z、&amp;联合使用。典型场景是运行比较耗时任务。</p><p>./， .， source 三者执行shell的区别。</p><p>exec：不启动新的shell，而是用要被执行的命令替换当前的shell脚本。exec命令后其他命令将不再执行，且会断开ssh链接。所以一般放到一个子脚本中运行。</p><p>source，就是让script在当前shell内执行、 而不是产生一个sub-shell来执行。 由于所有执行结果均在当前shell内执行、而不是产生一个sub-shell来执行。跟 <code>. xxx.sh</code> 一样效果。</p><p><code>./xxx.sh</code> 是直接fork一个子进程来执行。</p><p>export：跨脚本传递变量。</p><p>read:从标准输入读取一行。</p><p>脚本参数： <code>$1 第一个参数 $2 第二个参数 …… $@ 所有参数  $# 参数个数  $0 脚本本身 $? 上一条命令返回值</code></p><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><ol><li>局部变量，只在某个shell中生效。也可用<code>local</code>声明，在函数中生效。</li><li>环境变量，也叫全局变量。系统中有预设一些环境变量，如<code>HOME，PATH</code>，可以通过 <code>echo $PATH</code>访问。<br>如果需要在shell中导出变量给其他子shell中使用可以通过：<code>export VAR=value</code>。</li><li>变量的赋值与取值。变量名与值用<code>=</code>紧紧相连，中间不能有空格。${}是比$更保险的做法。如果值也是引用变量，要用<code>&quot;&quot;</code>,如<code>name=&quot;${name1}&quot;</code>。<code>unset</code>可以取消变量。只读变量通过readonly声明，或是<code>declare -r</code>。</li><li>转义通过<code>\</code>来让特殊字符输出。</li><li>命令替换是指将标准输出作为值赋给某个变量：<code>$(命令)</code>.</li><li><p>()与{}的差别：</p><p> () 将command group置于sub-shell(子shell)中去执行，也称 nested sub-shell。<br> {} 则是在同一个shell内完成，也称non-named command group。</p></li><li><p>常见算术运算符大多需要结合shell的内建命令let来使用。</p></li><li><code>$(())</code> 用来作整数运算的.</li><li><p>Wildcard与Regular Expression的差别.</p><p> wildcard只作用于argument的path上；而RE却只用于”字符串处理” 的程序中，如某些文字处理工具之间：grep， perl， vi，awk，sed，等等， 常用于表示一段连续的字符串，查找和替换,这与路径名一点关系也没有。</p></li></ol><h4 id="测试判断与循环"><a href="#测试判断与循环" class="headerlink" title="测试判断与循环"></a>测试判断与循环</h4><p>测试结构：</p><p><code>test expression</code>   or   <code>[ expression ] 括号内两边有空格</code> 建议采用后面的方式，更容易跟if  while case 这些连用。</p><p>文件测试，常用参数：<code>-e 文件或目录是否存在；-f 文件是否存在；-d 目录是否存在</code>。</p><p>字符串：<code>-z 是否为空；-n 非空返回真；= !=</code></p><p>整数比较：<code>-eq  -gt  -lt</code></p><p>逻辑：两种方式 <code>! -a -o</code>  or  <code>! &amp;&amp; ||</code>。</p><p>command1 &amp;&amp; command2 # command2只有在command1的RV为0(true)的条件下执行。</p><p>command1 || command2 # command2 只有在command1的RV为非0(false)的条件下执行。</p><p>[]与[[]]的区别<a href="http://www.zsythink.net/archives/2252" target="_blank" rel="noopener">Reference</a>：</p><p>当使用‘-n’‘-z’这种判断方式时，‘[]’需要在其中的变量外侧加上双引号，与test命令的用法一致，而使用<code>[[]]</code>时不用。</p><p>判断某个变量的值是否满足某个正则表达式，可以用符号<code>=~</code> + <code>[[]]</code>。</p><p>if 判断结构：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ expression ]; <span class="keyword">then</span></span><br><span class="line">    cmd1</span><br><span class="line"><span class="keyword">elif</span> [ exp1 ]; <span class="keyword">then</span></span><br><span class="line">    cmd2</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    cmd3</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>case 判断结构：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">case VAR in</span><br><span class="line"></span><br><span class="line">var1) cmd1<span class="comment">;;</span></span><br><span class="line">var2) cmd2<span class="comment">;;</span></span><br><span class="line">*) cmd3<span class="comment">;;</span></span><br><span class="line"></span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>for 循环：</p><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="type">VAR</span> <span class="keyword">in</span> (<span class="built_in">list</span>)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">    cmd</span><br><span class="line"></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>while 循环：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> expression</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    cmd</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>until循环结构：（测试假值）。</p><p>select循环，是一种菜单扩展循环方式，等待用户输入在执行。</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> MENU <span class="keyword">in</span> (<span class="built_in">list</span>)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    cmd</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>循环控制：break、continue。</p><h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><p>系统在启动一个进程时会同时打开三个文件：标准输入（stdin）、标准输出（stdout）、标准错误输出（stderr），分别用文件标识符0、1 、2来标识。标准输入为键盘，标准输出及错误输出默认为显示器或是串口。</p><p>> ：标准输出覆盖重定向，会覆盖原始文件。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ls -l /usr/ &gt; ls_usr.txt</span><br><span class="line">等价于</span><br><span class="line">ls -l /usr/ 1&gt; ls_usr.txt</span><br></pre></td></tr></table></figure></p><p>>>: 追加重定向。不清空原始文件。</p><p>>\&amp;: 标识输出重定向，将一个标识的输出重定向到另一个标识的输入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">COMMAND &gt; stdout_stderr.txt 2&gt;&amp;1 </span><br><span class="line">#2&gt;&amp;1代表 错误输出重定向到标准输出，同时打印到文件中。</span><br><span class="line"></span><br><span class="line">2&gt; /dev/null  #丢弃错误输出</span><br></pre></td></tr></table></figure><p>&lt; : 标准输入重定向。</p><p>&lt;&lt;: 这是所谓的here document, 它可以让我们输入一段文本， 直到读到&lt;&lt; 后指定的字符串。比方说：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat &lt;&lt;<span class="literal">EOF</span></span><br><span class="line"><span class="keyword">first</span> <span class="built_in">line</span> here</span><br><span class="line"><span class="keyword">second</span> <span class="built_in">line</span> here</span><br><span class="line"><span class="keyword">third</span> <span class="built_in">line</span> here</span><br><span class="line"><span class="literal">EOF</span></span><br></pre></td></tr></table></figure><p>| ： 管道，将一个命令的输出作为另一个命令的输入。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><ul><li>还不错的参考</li></ul><p><a href="https://github.com/wzb56/13_questions_of_shell" target="_blank" rel="noopener">shell 十三问</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2018/04/20/Linux-command-and-shell/bash.png&quot;&gt;
&lt;h2 id=&quot;系统命令何其多&quot;&gt;&lt;a href=&quot;#系统命令何其多&quot; class=&quot;headerlink&quot; title=&quot;系统命令何其多&quot;&gt;&lt;/a&gt;系统命令何其多&lt;
      
    
    </summary>
    
      <category term="shell" scheme="http://yoursite.com/categories/shell/"/>
    
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Build github pages with Hexo+NexT</title>
    <link href="http://yoursite.com/2018/04/17/Build%20github%20pages%20with%20Hexo+NexT/"/>
    <id>http://yoursite.com/2018/04/17/Build github pages with Hexo+NexT/</id>
    <published>2018-04-17T08:45:50.000Z</published>
    <updated>2018-04-18T03:28:33.717Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/04/17/Build%20github%20pages%20with%20Hexo+NexT/hexo-github.png"><p>主要记录在Windows下搭建博客系统的一些简要步骤，具体参考相关链接。</p><blockquote><p><em>PS：为了建这个博客，Search了网络上的一些信息，很多都是只言片语且不够全面，甚至过时。所以最好的做法是参考原始出处、原始文档，一是原始的更全面，二是会时时更新。</em></p></blockquote><h3 id="系统环境配置（Windows）"><a href="#系统环境配置（Windows）" class="headerlink" title="系统环境配置（Windows）"></a>系统环境配置（Windows）</h3><p>主要需要以下三个软件，按顺序安装(点击进官网查看相关)：</p><ul><li><a href="http://git-scm.com/download/" target="_blank" rel="noopener">git-scm</a></li><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Nodejs</a></li><li><a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a></li></ul><h3 id="Hexo相关"><a href="#Hexo相关" class="headerlink" title="Hexo相关"></a>Hexo相关</h3><ul><li>安装Hexo</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> d:/hexo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-cli -g</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo init blog</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> blog</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g <span class="comment"># 或者hexo generate</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo s <span class="comment"># 或者hexo server，可以在http://localhost:4000/ 查看</span></span></span><br></pre></td></tr></table></figure><ul><li><p><a href="https://hexo.io/docs/" target="_blank" rel="noopener">Hexo常用命令及用法-点击进官网</a></p><ul><li><code>hexo generate (hexo g)</code> 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹</li><li><code>hexo server (hexo s)</code> 启动本地web服务，用于博客的预览</li><li><code>hexo deploy (hexo d)</code> 部署播客到远端（比如github, heroku等平台）</li><li><code>hexo new &quot;postName&quot;</code> #新建文章</li><li><code>hexo new page &quot;pageName&quot;</code> #新建页面</li><li><code>hexo clean</code>  清除静态资源</li></ul></li></ul><h3 id="Next主题"><a href="#Next主题" class="headerlink" title="Next主题"></a><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">Next主题</a></h3><ul><li><p>clone <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">NexT主题</a></p><blockquote><p>git clone <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a></p></blockquote></li></ul><p>其中有个问题，如何将站点及主题的配置整合到一起，并合理的保存，参考NexT的 README中描述。</p><ul><li>相关配置（大多在主题_config.yaml中可配置）<ul><li>添加categories、tags（参考官方github README）</li><li>站点访问次数<ul><li>不蒜子 <a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">http://busuanzi.ibruce.info/</a> </li><li>busuanzi_count: true</li></ul></li><li>站内搜索<ul><li>algolia_search</li><li>local_search</li></ul></li><li>文章访问次数<ul><li>leancloud_visitors</li></ul></li><li>评论添加（有多种配置，参考_config.yaml）<ul><li>youyan_uid （<a href="http://www.uyan.cc）" target="_blank" rel="noopener">http://www.uyan.cc）</a></li></ul></li></ul></li></ul><h3 id="项目托管到github"><a href="#项目托管到github" class="headerlink" title="项目托管到github"></a>项目托管到github</h3><ul><li>创建github pages<ul><li>在github上新建仓库，且仓库的名字必须是username/username.github.io</li></ul></li><li>部署<ul><li>配置ssh-key:<code>ssh-keygen -t rsa -C &quot;注册git的邮箱&quot;</code>；</li><li>打开<a href="https://github.com/settings/ssh" target="_blank" rel="noopener">https://github.com/settings/ssh</a> -&gt;new SSH key 添加密钥，title随便写，key为id_rsa.pub中所有内容；</li><li>验证是否能否连接到github: <code>ssh -T git@github.com</code></li><li>同步到github<ul><li>首先安装：<code>npm install hexo-deployer-git --save</code></li><li>在blog目录执行： <code>hexo d</code></li></ul></li></ul></li></ul><p>按以上配置，基本上一个github pages基本完成，接下来要考虑如何编辑。</p><h3 id="编辑相关"><a href="#编辑相关" class="headerlink" title="编辑相关"></a>编辑相关</h3><ul><li><p>Markdown 编辑器选择</p><ul><li>Visual studio Code</li><li><a href="https://github.com/zhuzhuyule/HexoEditor/releases" target="_blank" rel="noopener">HexoEditor</a></li></ul></li><li><p>如何插入图片（<a href="https://hexo.io/docs/asset-folders.html" target="_blank" rel="noopener">Link</a>）</p><ul><li>post_asset_folder: true</li><li>asset_img</li></ul></li><li><p>如何插入代码（<a href="https://hexo.io/docs/tag-plugins.html" target="_blank" rel="noopener">Link</a>）</p><ul><li>采用 codeblock</li><li>3个`</li></ul></li></ul><div class="note default"><p>```[language] [title] [url] [link-text]</p><p><code>代码</code></p><p>```</p></div><p>[language] 是代码语言的名称，用来设置代码块颜色高亮，非必须；</p><p>[title] 是顶部左边的说明，非必须；</p><p>[url] 是顶部右边的超链接地址，非必须；</p><p>[link text] 如它的字面意思，超链接的名称，非必须。</p><p>亲测这 4 项应该是根据空格来分隔，而不是[]，故请不要加[]。除非如果你想写后面两个，但不想写前面两个，那么就必须加[]了，要这样写：<code>[] [] [url] [link text]</code>。</p><ul><li>如何添加categories&amp;tags（<a href="https://hexo.io/docs/front-matter.html" target="_blank" rel="noopener">Link</a>）</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>为什么选择github pages+hexo方案，最大的原因是免费，且有清新简约的Hexo引擎加上各种主题，然后可以在github上面保存Tracking。</p><p>在实施的过程中，最好是通读原始的文档，然后多实际尝试，一步一步会达到想要的结果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2018/04/17/Build%20github%20pages%20with%20Hexo+NexT/hexo-github.png&quot;&gt;
&lt;p&gt;主要记录在Windows下搭建博客系统的一些简要步骤，具体参考相关链接。&lt;/p&gt;
&lt;blockquote&gt;
&lt;
      
    
    </summary>
    
      <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
</feed>
